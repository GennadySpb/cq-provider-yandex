package plugin

import (
	"maps"
	"strings"

	"github.com/cloudquery/plugin-sdk/v4/caser"
	"github.com/cloudquery/plugin-sdk/v4/docs"
	"github.com/cloudquery/plugin-sdk/v4/schema"
	"github.com/cloudquery/plugin-sdk/v4/transformers"
	"github.com/yandex-cloud/cq-source-yc/resources/access"
	"github.com/yandex-cloud/cq-source-yc/resources/alb"
	"github.com/yandex-cloud/cq-source-yc/resources/audittrails"
	"github.com/yandex-cloud/cq-source-yc/resources/cdn"
	"github.com/yandex-cloud/cq-source-yc/resources/compute"
	"github.com/yandex-cloud/cq-source-yc/resources/containerregistry"
	"github.com/yandex-cloud/cq-source-yc/resources/datasphere"
	"github.com/yandex-cloud/cq-source-yc/resources/datatransfer"
	"github.com/yandex-cloud/cq-source-yc/resources/dns"
	"github.com/yandex-cloud/cq-source-yc/resources/iam"
	"github.com/yandex-cloud/cq-source-yc/resources/kms"
	"github.com/yandex-cloud/cq-source-yc/resources/kubernetes"
	"github.com/yandex-cloud/cq-source-yc/resources/lockbox"
	"github.com/yandex-cloud/cq-source-yc/resources/mdb"
	"github.com/yandex-cloud/cq-source-yc/resources/nlb"
	"github.com/yandex-cloud/cq-source-yc/resources/organizationmanager"
	"github.com/yandex-cloud/cq-source-yc/resources/resourcemanager"
	"github.com/yandex-cloud/cq-source-yc/resources/serverless"
	"github.com/yandex-cloud/cq-source-yc/resources/storage"
	"github.com/yandex-cloud/cq-source-yc/resources/vpc"
	"github.com/yandex-cloud/cq-source-yc/resources/vpc/privatelink"
	"github.com/yandex-cloud/cq-source-yc/resources/ydb"
)

var ycExceptions = map[string]string{
	"alb":                 "Application Load Balancer",
	"apigateway":          "API Gateway",
	"apigateways":         "API Gateways",
	"audittrails":         "Audit Trails",
	"cdn":                 "CDN",
	"compute":             "Compute",
	"containerregistry":   "Container Registry",
	"datasphere":          "DataSphere",
	"datatransfer":        "Data Transfer",
	"iam":                 "IAM",
	"kms":                 "Key Management Service",
	"mdb":                 "Managed Service for",
	"nlb":                 "Network Load Balancer",
	"organizationmanager": "Cloud Organization",
	"resourcemanager":     "Resource Manager",
	"storage":             "Object Storage",
	"yc":                  "YC",
	"ydb":                 "Managed Service for YDB",
}

func tableTransformer(table *schema.Table) error {
	if table.Title != "" {
		return nil
	}
	exceptions := maps.Clone(docs.DefaultTitleExceptions)
	for k, v := range ycExceptions {
		exceptions[k] = v
	}
	csr := caser.New(caser.WithCustomExceptions(exceptions))
	t := csr.ToTitle(table.Name)
	table.Title = strings.Trim(strings.ReplaceAll(t, "  ", " "), " ")
	return nil
}

func PluginAutoGeneratedTables() schema.Tables {
	tables := schema.Tables{
		access.CloudsAccessBindings(),
		access.FoldersAccessBindings(),
		access.OrganizationsAccessBindings(),
		alb.Balancers(),
		audittrails.Trails(),
		cdn.Resources(),
		compute.Disks(),
		compute.Images(),
		compute.Instances(),
		containerregistry.Registries(),
		datasphere.Communities(),
		datatransfer.Endpoints(),
		datatransfer.Transfers(),
		dns.Zones(),
		iam.ServiceAccounts(),
		kms.AsymmetricKeys(),
		kms.SymmetricKeys(),
		kubernetes.Clusters(),
		kubernetes.NodeGroups(),
		lockbox.Secrets(),
		mdb.ClickhouseClusters(),
		mdb.GreenplumClusters(),
		mdb.KafkaClusters(),
		mdb.MongoDBClusters(),
		mdb.MySQLClusters(),
		mdb.OpenSearchClusters(),
		mdb.PostgreSQLClusters(),
		mdb.RedisClusters(),
		nlb.Balancers(),
		nlb.TargetGroups(),
		organizationmanager.Organizations(),
		organizationmanager.Users(),
		privatelink.PrivateEndpoints(),
		resourcemanager.Clouds(),
		resourcemanager.Folders(),
		serverless.APIGatewayGateways(),
		serverless.ContainersContainers(),
		serverless.FunctionsFunctions(),
		storage.Buckets(),
		vpc.Addresses(),
		vpc.Gateways(),
		vpc.Networks(),
		vpc.RouteTables(),
		vpc.SecurityGroups(),
		vpc.Subnets(),
		ydb.Databases(),
	}
	if err := transformers.TransformTables(tables); err != nil {
		panic(err)
	}

	if err := transformers.Apply(tables, tableTransformer); err != nil {
		panic(err)
	}

	for _, table := range tables {
		schema.AddCqIDs(table)
	}
	return tables
}
