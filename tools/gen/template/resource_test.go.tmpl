// Code generated by yandex cloud generator; DO NOT EDIT.

package resources_test

import (
	"context"
	"fmt"
	"net"
	"testing"

	"google.golang.org/grpc"

	"github.com/cloudquery/cq-provider-sdk/logging"
	"github.com/cloudquery/cq-provider-sdk/provider/providertest"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/cloudquery/faker/v3"
	"github.com/hashicorp/go-hclog"
	"github.com/yandex-cloud/cq-provider-yandex/client"
	"github.com/yandex-cloud/cq-provider-yandex/resources"
	{{.Service | snake}}1 "github.com/yandex-cloud/go-genproto/yandex/cloud/{{.Service | snake}}/v1"
	"github.com/yandex-cloud/go-sdk/gen/{{.Service | snake}}"
)

func Test{{.Service}}{{.Resource | plural}}(t *testing.T) {
	var serv *grpc.Server
	resource := providertest.ResourceTestData{
		Table: resources.{{.Service}}{{.Resource | plural}}(),
		Config: client.Config{
			FolderIDs: []string{"testFolder"},
		},
		Configure: func(logger hclog.Logger, _ interface{}) (schema.ClientMeta, error) {
			{{.Service | snake}}Svc, serv1, err := create{{.Resource}}Server()
			serv = serv1
			if err != nil {
				return nil, err
			}
			c := client.NewYandexClient(logging.New(&hclog.LoggerOptions{
				Level: hclog.Warn,
			}), []string{"testFolder"}, &client.Services{
				{{.Service}}: {{.Service | snake}}Svc,
			})
			return c, nil
		},
	}
	providertest.TestResource(t, resources.Provider, resource)
	serv.Stop()
}

type Fake{{.Resource}}ServiceServer struct {
	{{.Service | snake}}1.Unimplemented{{.Resource}}ServiceServer
	{{.Resource}} *{{.Service | snake}}1.{{.Resource}}
}

func NewFake{{.Resource}}ServiceServer() (*Fake{{.Resource}}ServiceServer, error) {
	var {{.Resource | snake}} {{.Service | snake}}1.{{.Resource}}
	faker.SetIgnoreInterface(true)
	err := faker.FakeData(&{{.Resource | snake}})
	if err != nil {
		return nil, err
	}
	return &Fake{{.Resource}}ServiceServer{ {{- .Resource}}: &{{.Resource | snake}}}, nil
}

func (s *Fake{{.Resource}}ServiceServer) List(context.Context, *{{.Service | snake}}1.List{{.Resource | plural}}Request) (*{{.Service | snake}}1.List{{.Resource | plural}}Response, error) {
	return &{{.Service | snake}}1.List{{.Resource | plural}}Response{ {{- .Resource | replaceSymmetricKey | plural}}: []*{{.Service | snake}}1.{{.Resource}}{s.{{.Resource}}}}, nil
}

func create{{.Resource}}Server() (*{{.Service | snake}}.{{.Service}}, *grpc.Server,error) {
	lis, err := net.Listen("tcp", ":50051")

	if err != nil {
		return nil, nil, err
	}

	serv := grpc.NewServer()
	fake{{.Resource}}ServiceServer, err := NewFake{{.Resource}}ServiceServer()

	if err != nil {
		return nil, nil, err
	}

	{{.Service | snake}}1.Register{{.Resource}}ServiceServer(serv, fake{{.Resource}}ServiceServer)

	go func() {
		err := serv.Serve(lis)
		if err != nil {
			fmt.Println(err.Error())
		}
	}()

	conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())

	if err != nil {
		return nil, nil, err
	}

	return {{.Service | snake}}.New{{.Service}}(
		func(ctx context.Context) (*grpc.ClientConn, error) {
			return conn, nil
		},
	), serv, nil
}
