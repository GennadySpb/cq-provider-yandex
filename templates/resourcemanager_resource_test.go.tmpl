// Code generated by yandex cloud generator; DO NOT EDIT.

package resources_test

import (
	"context"
	"errors"
	"fmt"
	"net"
	"testing"

	"google.golang.org/grpc"

	"github.com/cloudquery/cq-provider-sdk/logging"
	"github.com/cloudquery/cq-provider-sdk/provider/providertest"
	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/cloudquery/faker/v3"
	"github.com/hashicorp/go-hclog"
	"github.com/yandex-cloud/cq-provider-yandex/client"
	"github.com/yandex-cloud/cq-provider-yandex/resources"
	resourcemanager1 "github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
	"github.com/yandex-cloud/go-sdk/gen/resourcemanager"
)

func TestResourceManager{{.resource | plural}}(t *testing.T) {
	resourcemanagerSvc, serv, err := create{{.resource}}Server()
	if err != nil {
	    t.Fatal(err)
	}
	resource := providertest.ResourceTestData{
		Table: resources.ResourceManager{{.resource | plural}}(),
		Config: client.Config{
			{{.resource}}IDs: []string{"test{{.resource}}"},
		},
		Configure: func(logger hclog.Logger, _ interface{}) (schema.ClientMeta, error) {
			c := client.NewYandexClient(logging.New(&hclog.LoggerOptions{
				Level: hclog.Warn,
			}), []string{"test{{.resource}}"}, nil, nil, &client.Services{
				ResourceManager: resourcemanagerSvc,
			}, nil)
			return c, nil
		},
	}
	providertest.TestResource(t, resources.Provider, resource)
	serv.Stop()
}

type Fake{{.resource}}ServiceServer struct {
	resourcemanager1.Unimplemented{{.resource}}ServiceServer
	{{.resource}} *resourcemanager1.{{.resource}}
}

func NewFake{{.resource}}ServiceServer() (*Fake{{.resource}}ServiceServer, error) {
	var {{.resource}} resourcemanager1.{{.resource}}
	faker.SetIgnoreInterface(true)
	err := faker.FakeData(&{{.resource}})
	if err != nil {
		return nil, err
	}
	{{.resource}}.Name = "test{{.resource}}"
	return &Fake{{.resource}}ServiceServer{ {{- .resource}}: &{{.resource}}}, nil
}

func (s *Fake{{.resource}}ServiceServer) Get(_ context.Context, req *resourcemanager1.Get{{.resource}}Request) (*resourcemanager1.{{.resource}}, error) {
	if req.{{.resource}}Id == "test{{.resource}}" {
		return s.{{.resource}}, nil
	}
	return nil, errors.New("no such {{.resource}}")
}

func create{{.resource}}Server() (*resourcemanager.ResourceManager, *grpc.Server, error) {
	lis, err := net.Listen("tcp", ":50051")

	if err != nil {
		return nil, nil, err
	}

	serv := grpc.NewServer()
	fake{{.resource}}ServiceServer, err := NewFake{{.resource}}ServiceServer()

	if err != nil {
		return nil, nil, err
	}

	resourcemanager1.Register{{.resource}}ServiceServer(serv, fake{{.resource}}ServiceServer)

	go func() {
		err := serv.Serve(lis)
		if err != nil {
			fmt.Println(err.Error())
		}
	}()

	conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())

	if err != nil {
		return nil, nil, err
	}

	return resourcemanager.NewResourceManager(
		func(ctx context.Context) (*grpc.ClientConn, error) {
			return conn, nil
		},
	), serv, nil
}
