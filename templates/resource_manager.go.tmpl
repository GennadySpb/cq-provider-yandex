// Code generated by cq-provider-yandex resource generator; DO NOT EDIT.

package resources

import (
	"context"

	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/yandex-cloud/cq-provider-yandex/client"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
)

func ResourceManager{{.resource | plural}}() *schema.Table {
	return &schema.Table{
		Name:        "yandex_resourcemanager_{{.resource | plural | snake}}",
		Resolver:    fetchResourceManager{{.resource | plural}},
		Multiplex:   client.MultiplexBy(client.{{.resource | plural}}),
		IgnoreError: client.IgnoreErrorHandler,
		Columns: []schema.Column{
			{
				Name:        "id",
				Type:        schema.TypeString,
				Description: "ID of the {{.resource | snake}}.",
				Resolver:    client.ResolveResourceId,
				CreationOptions: schema.ColumnCreationOptions{NotNull: true, Unique: true},
			},
			{
				Name:        "created_at",
				Type:        schema.TypeTimestamp,
				Description: "",
				Resolver:    client.ResolveAsTime,
			},
			{
				Name:        "name",
				Type:        schema.TypeString,
				Description: "Name of the {{.resource | snake}}. 3-63 characters long.",
				Resolver:    schema.PathResolver("Name"),
			},
			{
				Name:        "description",
				Type:        schema.TypeString,
				Description: "Description of the {{.resource | snake}}. 0-256 characters long.",
				Resolver:    schema.PathResolver("Description"),
			},
			{
				Name:        "organization_id",
				Type:        schema.TypeString,
				Description: "ID of the organization that the {{.resource | snake}} belongs to.",
				Resolver:    schema.PathResolver("OrganizationId"),
			},
		},
	}

}

func fetchResourceManager{{.resource | plural}}(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)

	{{.resource | snake}}, err := c.Services.ResourceManager.{{.resource}}().Get(ctx, &resourcemanager.Get{{.resource}}Request{ {{- .resource}}Id: c.MultiplexedResourceId})
	if err != nil {
		return err
	}

	res <- {{.resource | snake}}

	return nil
}
