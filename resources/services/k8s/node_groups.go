// Code generated by codegen; DO NOT EDIT.

package k8s

import (
	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/yandex-cloud/cq-provider-yandex/client"
)

func NodeGroups() *schema.Table {
	return &schema.Table{
		Name:      "yandex_k8s_node_groups",
		Resolver:  fetchNodeGroups,
		Multiplex: client.MultiplexBy(client.Folders),
		Columns: []schema.Column{
			{
				Name:        "id",
				Type:        schema.TypeString,
				Resolver:    schema.PathResolver("Id"),
				Description: `Resource ID`,
				CreationOptions: schema.ColumnCreationOptions{
					PrimaryKey: true,
				},
			},
			{
				Name:     "cluster_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ClusterId"),
			},
			{
				Name:     "created_at",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("CreatedAt"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "description",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Description"),
			},
			{
				Name:     "labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Labels"),
			},
			{
				Name:     "status",
				Type:     schema.TypeInt,
				Resolver: schema.PathResolver("Status"),
			},
			{
				Name:     "node_template",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NodeTemplate"),
			},
			{
				Name:     "scale_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ScalePolicy"),
			},
			{
				Name:     "allocation_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AllocationPolicy"),
			},
			{
				Name:     "deploy_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DeployPolicy"),
			},
			{
				Name:     "instance_group_id",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("InstanceGroupId"),
			},
			{
				Name:     "node_version",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("NodeVersion"),
			},
			{
				Name:     "version_info",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("VersionInfo"),
			},
			{
				Name:     "maintenance_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("MaintenancePolicy"),
			},
			{
				Name:     "allowed_unsafe_sysctls",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("AllowedUnsafeSysctls"),
			},
			{
				Name:     "node_taints",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NodeTaints"),
			},
			{
				Name:     "node_labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("NodeLabels"),
			},
		},

		Relations: []*schema.Table{
			Nodes(),
		},
	}
}
