// Code generated by yandex cloud generator; DO NOT EDIT.

package resources

import (
	"context"

	"github.com/thoas/go-funk"

	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/yandex-cloud/cq-provider-yandex/client"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/serverless/apigateway/v1"
)

func ServerlessApiGateways() *schema.Table {
	return &schema.Table{
		Name:         "yandex_serverless_api_gateways",
		Resolver:     fetchServerlessApiGateways,
		Multiplex:    client.MultiplexBy(client.Folders),
		IgnoreError:  client.IgnoreErrorHandler,
		DeleteFilter: client.DeleteFolderFilter,
		Columns: []schema.Column{
			{
				Name:            "id",
				Type:            schema.TypeString,
				Description:     "ID of the resource.",
				Resolver:        client.ResolveResourceId,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: true},
			},
			{
				Name:            "folder_id",
				Type:            schema.TypeString,
				Description:     "ID of the folder that the resource belongs to.",
				Resolver:        client.ResolveFolderID,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "created_at",
				Type:            schema.TypeTimestamp,
				Description:     "",
				Resolver:        client.ResolveAsTime,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "name",
				Type:            schema.TypeString,
				Description:     "Name of the API gateway. The name is unique within the folder.",
				Resolver:        schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "description",
				Type:            schema.TypeString,
				Description:     "Description of the API gateway.",
				Resolver:        schema.PathResolver("Description"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "labels",
				Type:            schema.TypeJSON,
				Description:     "Resource labels as `key:value` pairs. Maximum of 64 per resource.",
				Resolver:        client.ResolveLabels,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "status",
				Type:            schema.TypeString,
				Description:     "Status of the API gateway.",
				Resolver:        client.EnumPathResolver("Status"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "domain",
				Type:            schema.TypeString,
				Description:     "Default domain for the API gateway. Generated at creation time.",
				Resolver:        schema.PathResolver("Domain"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "log_group_id",
				Type:            schema.TypeString,
				Description:     "ID of the log group for the API gateway.",
				Resolver:        schema.PathResolver("LogGroupId"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
		},

		Relations: []*schema.Table{
			{
				Name:        "yandex_apigateway_api_gateway_attached_domains",
				Resolver:    fetchApiGatewayApiGatewayAttachedDomains,
				Multiplex:   client.EmptyMultiplex,
				IgnoreError: client.IgnoreErrorHandler,
				Columns: []schema.Column{
					{
						Name:            "api_gateway_cq_id",
						Type:            schema.TypeUUID,
						Description:     "cq_id of parent api_gateway",
						Resolver:        schema.ParentIdResolver,
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "api_gateway_id",
						Type:            schema.TypeString,
						Description:     "id of parent api_gateway",
						Resolver:        schema.ParentResourceFieldResolver("id"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "domain_id",
						Type:            schema.TypeString,
						Description:     "ID of the domain.",
						Resolver:        schema.PathResolver("DomainId"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "certificate_id",
						Type:            schema.TypeString,
						Description:     "ID of the domain certificate.",
						Resolver:        schema.PathResolver("CertificateId"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "enabled",
						Type:            schema.TypeBool,
						Description:     "Enabling flag.",
						Resolver:        schema.PathResolver("Enabled"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "domain",
						Type:            schema.TypeString,
						Description:     "Name of the domain.",
						Resolver:        schema.PathResolver("Domain"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
				},
			},
		},
	}

}

func fetchServerlessApiGateways(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan interface{}) error {
	c := meta.(*client.Client)

	locations := []string{c.MultiplexedResourceId}

	for _, f := range locations {
		req := &apigateway.ListApiGatewayRequest{FolderId: f}
		it := c.Services.ApiGateway.ApiGateway().ApiGatewayIterator(ctx, req)
		for it.Next() {
			res <- it.Value()
		}
	}

	return nil
}

func fetchApiGatewayApiGatewayAttachedDomains(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "AttachedDomains")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}
