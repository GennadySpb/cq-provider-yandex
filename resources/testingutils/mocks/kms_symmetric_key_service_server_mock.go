// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1 (interfaces: SymmetricKeyServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	kms "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	reflect "reflect"
)

// MockSymmetricKeyServiceServer is a mock of SymmetricKeyServiceServer interface
type MockSymmetricKeyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSymmetricKeyServiceServerMockRecorder
}

// MockSymmetricKeyServiceServerMockRecorder is the mock recorder for MockSymmetricKeyServiceServer
type MockSymmetricKeyServiceServerMockRecorder struct {
	mock *MockSymmetricKeyServiceServer
}

// NewMockSymmetricKeyServiceServer creates a new mock instance
func NewMockSymmetricKeyServiceServer(ctrl *gomock.Controller) *MockSymmetricKeyServiceServer {
	mock := &MockSymmetricKeyServiceServer{ctrl: ctrl}
	mock.recorder = &MockSymmetricKeyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSymmetricKeyServiceServer) EXPECT() *MockSymmetricKeyServiceServerMockRecorder {
	return m.recorder
}

// CancelVersionDestruction mocks base method
func (m *MockSymmetricKeyServiceServer) CancelVersionDestruction(arg0 context.Context, arg1 *kms.CancelSymmetricKeyVersionDestructionRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelVersionDestruction", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelVersionDestruction indicates an expected call of CancelVersionDestruction
func (mr *MockSymmetricKeyServiceServerMockRecorder) CancelVersionDestruction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVersionDestruction", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).CancelVersionDestruction), arg0, arg1)
}

// Create mocks base method
func (m *MockSymmetricKeyServiceServer) Create(arg0 context.Context, arg1 *kms.CreateSymmetricKeyRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSymmetricKeyServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockSymmetricKeyServiceServer) Delete(arg0 context.Context, arg1 *kms.DeleteSymmetricKeyRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSymmetricKeyServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockSymmetricKeyServiceServer) Get(arg0 context.Context, arg1 *kms.GetSymmetricKeyRequest) (*kms.SymmetricKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*kms.SymmetricKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSymmetricKeyServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockSymmetricKeyServiceServer) List(arg0 context.Context, arg1 *kms.ListSymmetricKeysRequest) (*kms.ListSymmetricKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*kms.ListSymmetricKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSymmetricKeyServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).List), arg0, arg1)
}

// ListAccessBindings mocks base method
func (m *MockSymmetricKeyServiceServer) ListAccessBindings(arg0 context.Context, arg1 *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessBindings", arg0, arg1)
	ret0, _ := ret[0].(*access.ListAccessBindingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessBindings indicates an expected call of ListAccessBindings
func (mr *MockSymmetricKeyServiceServerMockRecorder) ListAccessBindings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessBindings", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).ListAccessBindings), arg0, arg1)
}

// ListOperations mocks base method
func (m *MockSymmetricKeyServiceServer) ListOperations(arg0 context.Context, arg1 *kms.ListSymmetricKeyOperationsRequest) (*kms.ListSymmetricKeyOperationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", arg0, arg1)
	ret0, _ := ret[0].(*kms.ListSymmetricKeyOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations
func (mr *MockSymmetricKeyServiceServerMockRecorder) ListOperations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).ListOperations), arg0, arg1)
}

// ListVersions mocks base method
func (m *MockSymmetricKeyServiceServer) ListVersions(arg0 context.Context, arg1 *kms.ListSymmetricKeyVersionsRequest) (*kms.ListSymmetricKeyVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions", arg0, arg1)
	ret0, _ := ret[0].(*kms.ListSymmetricKeyVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions
func (mr *MockSymmetricKeyServiceServerMockRecorder) ListVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).ListVersions), arg0, arg1)
}

// Rotate mocks base method
func (m *MockSymmetricKeyServiceServer) Rotate(arg0 context.Context, arg1 *kms.RotateSymmetricKeyRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rotate", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rotate indicates an expected call of Rotate
func (mr *MockSymmetricKeyServiceServerMockRecorder) Rotate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rotate", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).Rotate), arg0, arg1)
}

// ScheduleVersionDestruction mocks base method
func (m *MockSymmetricKeyServiceServer) ScheduleVersionDestruction(arg0 context.Context, arg1 *kms.ScheduleSymmetricKeyVersionDestructionRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleVersionDestruction", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleVersionDestruction indicates an expected call of ScheduleVersionDestruction
func (mr *MockSymmetricKeyServiceServerMockRecorder) ScheduleVersionDestruction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleVersionDestruction", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).ScheduleVersionDestruction), arg0, arg1)
}

// SetAccessBindings mocks base method
func (m *MockSymmetricKeyServiceServer) SetAccessBindings(arg0 context.Context, arg1 *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccessBindings", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccessBindings indicates an expected call of SetAccessBindings
func (mr *MockSymmetricKeyServiceServerMockRecorder) SetAccessBindings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessBindings", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).SetAccessBindings), arg0, arg1)
}

// SetPrimaryVersion mocks base method
func (m *MockSymmetricKeyServiceServer) SetPrimaryVersion(arg0 context.Context, arg1 *kms.SetPrimarySymmetricKeyVersionRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrimaryVersion", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPrimaryVersion indicates an expected call of SetPrimaryVersion
func (mr *MockSymmetricKeyServiceServerMockRecorder) SetPrimaryVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrimaryVersion", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).SetPrimaryVersion), arg0, arg1)
}

// Update mocks base method
func (m *MockSymmetricKeyServiceServer) Update(arg0 context.Context, arg1 *kms.UpdateSymmetricKeyRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockSymmetricKeyServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).Update), arg0, arg1)
}

// UpdateAccessBindings mocks base method
func (m *MockSymmetricKeyServiceServer) UpdateAccessBindings(arg0 context.Context, arg1 *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessBindings", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessBindings indicates an expected call of UpdateAccessBindings
func (mr *MockSymmetricKeyServiceServerMockRecorder) UpdateAccessBindings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessBindings", reflect.TypeOf((*MockSymmetricKeyServiceServer)(nil).UpdateAccessBindings), arg0, arg1)
}
