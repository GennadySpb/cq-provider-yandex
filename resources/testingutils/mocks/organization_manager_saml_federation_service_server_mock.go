// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/saml (interfaces: FederationServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	saml "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/saml"
	reflect "reflect"
)

// MockFederationServiceServer is a mock of FederationServiceServer interface
type MockFederationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFederationServiceServerMockRecorder
}

// MockFederationServiceServerMockRecorder is the mock recorder for MockFederationServiceServer
type MockFederationServiceServerMockRecorder struct {
	mock *MockFederationServiceServer
}

// NewMockFederationServiceServer creates a new mock instance
func NewMockFederationServiceServer(ctrl *gomock.Controller) *MockFederationServiceServer {
	mock := &MockFederationServiceServer{ctrl: ctrl}
	mock.recorder = &MockFederationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFederationServiceServer) EXPECT() *MockFederationServiceServerMockRecorder {
	return m.recorder
}

// AddUserAccounts mocks base method
func (m *MockFederationServiceServer) AddUserAccounts(arg0 context.Context, arg1 *saml.AddFederatedUserAccountsRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserAccounts", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserAccounts indicates an expected call of AddUserAccounts
func (mr *MockFederationServiceServerMockRecorder) AddUserAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserAccounts", reflect.TypeOf((*MockFederationServiceServer)(nil).AddUserAccounts), arg0, arg1)
}

// Create mocks base method
func (m *MockFederationServiceServer) Create(arg0 context.Context, arg1 *saml.CreateFederationRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFederationServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFederationServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockFederationServiceServer) Delete(arg0 context.Context, arg1 *saml.DeleteFederationRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockFederationServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFederationServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockFederationServiceServer) Get(arg0 context.Context, arg1 *saml.GetFederationRequest) (*saml.Federation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*saml.Federation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFederationServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFederationServiceServer)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockFederationServiceServer) List(arg0 context.Context, arg1 *saml.ListFederationsRequest) (*saml.ListFederationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*saml.ListFederationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFederationServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFederationServiceServer)(nil).List), arg0, arg1)
}

// ListOperations mocks base method
func (m *MockFederationServiceServer) ListOperations(arg0 context.Context, arg1 *saml.ListFederationOperationsRequest) (*saml.ListFederationOperationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", arg0, arg1)
	ret0, _ := ret[0].(*saml.ListFederationOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations
func (mr *MockFederationServiceServerMockRecorder) ListOperations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockFederationServiceServer)(nil).ListOperations), arg0, arg1)
}

// ListUserAccounts mocks base method
func (m *MockFederationServiceServer) ListUserAccounts(arg0 context.Context, arg1 *saml.ListFederatedUserAccountsRequest) (*saml.ListFederatedUserAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAccounts", arg0, arg1)
	ret0, _ := ret[0].(*saml.ListFederatedUserAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAccounts indicates an expected call of ListUserAccounts
func (mr *MockFederationServiceServerMockRecorder) ListUserAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAccounts", reflect.TypeOf((*MockFederationServiceServer)(nil).ListUserAccounts), arg0, arg1)
}

// Update mocks base method
func (m *MockFederationServiceServer) Update(arg0 context.Context, arg1 *saml.UpdateFederationRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockFederationServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFederationServiceServer)(nil).Update), arg0, arg1)
}
