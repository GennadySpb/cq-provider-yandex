// Code generated by yandex cloud generator; DO NOT EDIT.

package resources

import (
	"context"

	"github.com/thoas/go-funk"

	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/yandex-cloud/cq-provider-yandex/client"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1"
)

func CertificateManagerCertificates() *schema.Table {
	return &schema.Table{
		Name:         "yandex_certificatemanager_certificates",
		Resolver:     fetchCertificateManagerCertificates,
		Multiplex:    client.MultiplexBy(client.Folders),
		IgnoreError:  client.IgnoreErrorHandler,
		DeleteFilter: client.DeleteFolderFilter,
		Columns: []schema.Column{
			{
				Name:            "id",
				Type:            schema.TypeString,
				Description:     "ID of the resource.",
				Resolver:        client.ResolveResourceId,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: true},
			},
			{
				Name:            "folder_id",
				Type:            schema.TypeString,
				Description:     "ID of the folder that the resource belongs to.",
				Resolver:        client.ResolveFolderID,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "created_at",
				Type:            schema.TypeTimestamp,
				Description:     "",
				Resolver:        client.ResolveAsTime,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "name",
				Type:            schema.TypeString,
				Description:     "Name of the certificate.\n The name is unique within the folder.",
				Resolver:        schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "description",
				Type:            schema.TypeString,
				Description:     "Description of the certificate.",
				Resolver:        schema.PathResolver("Description"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "labels",
				Type:            schema.TypeJSON,
				Description:     "Resource labels as `key:value` pairs. Maximum of 64 per resource.",
				Resolver:        client.ResolveLabels,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "type",
				Type:            schema.TypeString,
				Description:     "Type of the certificate.",
				Resolver:        client.EnumPathResolver("Type"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "domains",
				Type:            schema.TypeStringArray,
				Description:     "Fully qualified domain names of the certificate.",
				Resolver:        schema.PathResolver("Domains"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "status",
				Type:            schema.TypeString,
				Description:     "Status of the certificate.",
				Resolver:        client.EnumPathResolver("Status"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "issuer",
				Type:            schema.TypeString,
				Description:     "[Distinguished Name](https://tools.ietf.org/html/rfc1779) of the certificate authority that issued the certificate.",
				Resolver:        schema.PathResolver("Issuer"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "subject",
				Type:            schema.TypeString,
				Description:     "[Distinguished Name](https://tools.ietf.org/html/rfc1779) of the entity that is associated with the public key contained in the certificate.",
				Resolver:        schema.PathResolver("Subject"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "serial",
				Type:            schema.TypeString,
				Description:     "Serial number of the certificate.",
				Resolver:        schema.PathResolver("Serial"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "updated_at",
				Type:            schema.TypeTimestamp,
				Description:     "Time when the certificate is updated.",
				Resolver:        client.ResolveAsTime,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "issued_at",
				Type:            schema.TypeTimestamp,
				Description:     "Time when the certificate is issued.",
				Resolver:        client.ResolveAsTime,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "not_after",
				Type:            schema.TypeTimestamp,
				Description:     "Time after which the certificate is not valid.",
				Resolver:        client.ResolveAsTime,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "not_before",
				Type:            schema.TypeTimestamp,
				Description:     "Time before which the certificate is not valid.",
				Resolver:        client.ResolveAsTime,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
		},

		Relations: []*schema.Table{
			{
				Name:        "yandex_certificatemanager_certificate_challenges",
				Resolver:    fetchCertificateManagerCertificateChallenges,
				Multiplex:   client.EmptyMultiplex,
				IgnoreError: client.IgnoreErrorHandler,
				Columns: []schema.Column{
					{
						Name:            "certificate_cq_id",
						Type:            schema.TypeUUID,
						Description:     "cq_id of parent certificate",
						Resolver:        schema.ParentIdResolver,
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "certificate_id",
						Type:            schema.TypeString,
						Description:     "id of parent certificate",
						Resolver:        schema.ParentResourceFieldResolver("id"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "domain",
						Type:            schema.TypeString,
						Description:     "Domain of the challenge.",
						Resolver:        schema.PathResolver("Domain"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "type",
						Type:            schema.TypeString,
						Description:     "Type of the challenge.",
						Resolver:        client.EnumPathResolver("Type"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "created_at",
						Type:            schema.TypeTimestamp,
						Description:     "Time when the challenge is created.",
						Resolver:        client.ResolveAsTime,
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "updated_at",
						Type:            schema.TypeTimestamp,
						Description:     "Time when the challenge is updated.",
						Resolver:        client.ResolveAsTime,
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "status",
						Type:            schema.TypeString,
						Description:     "Status of the challenge.",
						Resolver:        client.EnumPathResolver("Status"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "message",
						Type:            schema.TypeString,
						Description:     "Description of the challenge.",
						Resolver:        schema.PathResolver("Message"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "error",
						Type:            schema.TypeString,
						Description:     "Error of the challenge.",
						Resolver:        schema.PathResolver("Error"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "challenge_dns_challenge_name",
						Type:            schema.TypeString,
						Description:     "Name of the DNS record.",
						Resolver:        schema.PathResolver("Challenge.DnsChallenge.Name"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "challenge_dns_challenge_type",
						Type:            schema.TypeString,
						Description:     "Type of the DNS-record.",
						Resolver:        schema.PathResolver("Challenge.DnsChallenge.Type"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "challenge_dns_challenge_value",
						Type:            schema.TypeString,
						Description:     "Value of the DNS-record.",
						Resolver:        schema.PathResolver("Challenge.DnsChallenge.Value"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "challenge_http_challenge_url",
						Type:            schema.TypeString,
						Description:     "Location of the HTTP file.",
						Resolver:        schema.PathResolver("Challenge.HttpChallenge.Url"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "challenge_http_challenge_content",
						Type:            schema.TypeString,
						Description:     "Content of the HTTP file.",
						Resolver:        schema.PathResolver("Challenge.HttpChallenge.Content"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
				},
			},
		},
	}

}

func fetchCertificateManagerCertificates(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan interface{}) error {
	c := meta.(*client.Client)

	locations := []string{c.MultiplexedResourceId}

	for _, f := range locations {
		req := &certificatemanager.ListCertificatesRequest{FolderId: f}
		it := c.Services.CertificateManager.Certificate().CertificateIterator(ctx, req)
		for it.Next() {
			res <- it.Value()
		}
	}

	return nil
}

func fetchCertificateManagerCertificateChallenges(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "Challenges")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}
