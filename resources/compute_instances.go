// Code generated by yandex cloud generator; DO NOT EDIT.

package resources

import (
	"context"

	"github.com/thoas/go-funk"

	"github.com/cloudquery/cq-provider-sdk/provider/schema"
	"github.com/yandex-cloud/cq-provider-yandex/client"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
)

func ComputeInstances() *schema.Table {
	return &schema.Table{
		Name:         "yandex_compute_instances",
		Resolver:     fetchComputeInstances,
		Multiplex:    client.MultiplexBy(client.Folders),
		IgnoreError:  client.IgnoreErrorHandler,
		DeleteFilter: client.DeleteFolderFilter,
		Columns: []schema.Column{
			{
				Name:            "id",
				Type:            schema.TypeString,
				Description:     "ID of the resource.",
				Resolver:        client.ResolveResourceId,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: true},
			},
			{
				Name:            "folder_id",
				Type:            schema.TypeString,
				Description:     "ID of the folder that the resource belongs to.",
				Resolver:        client.ResolveFolderID,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "created_at",
				Type:            schema.TypeTimestamp,
				Description:     "",
				Resolver:        client.ResolveAsTime,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "name",
				Type:            schema.TypeString,
				Description:     "Name of the instance. 1-63 characters long.",
				Resolver:        schema.PathResolver("Name"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "description",
				Type:            schema.TypeString,
				Description:     "Description of the instance. 0-256 characters long.",
				Resolver:        schema.PathResolver("Description"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "labels",
				Type:            schema.TypeJSON,
				Description:     "Resource labels as `key:value` pairs. Maximum of 64 per resource.",
				Resolver:        client.ResolveLabels,
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "zone_id",
				Type:            schema.TypeString,
				Description:     "ID of the availability zone where the instance resides.",
				Resolver:        schema.PathResolver("ZoneId"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "platform_id",
				Type:            schema.TypeString,
				Description:     "ID of the hardware platform configuration for the instance.",
				Resolver:        schema.PathResolver("PlatformId"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "resources_memory",
				Type:            schema.TypeBigInt,
				Description:     "The amount of memory available to the instance, specified in bytes.",
				Resolver:        schema.PathResolver("Resources.Memory"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "resources_cores",
				Type:            schema.TypeBigInt,
				Description:     "The number of cores available to the instance.",
				Resolver:        schema.PathResolver("Resources.Cores"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "resources_core_fraction",
				Type:            schema.TypeBigInt,
				Description:     "Baseline level of CPU performance with the ability to burst performance above that baseline level.\n This field sets baseline performance for each core.",
				Resolver:        schema.PathResolver("Resources.CoreFraction"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "resources_gpus",
				Type:            schema.TypeBigInt,
				Description:     "The number of GPUs available to the instance.",
				Resolver:        schema.PathResolver("Resources.Gpus"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "status",
				Type:            schema.TypeString,
				Description:     "Status of the instance.",
				Resolver:        client.EnumPathResolver("Status"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "metadata",
				Type:            schema.TypeJSON,
				Description:     "The metadata `key:value` pairs assigned to this instance. This includes custom metadata and predefined keys.\n\n For example, you may use the metadata in order to provide your public SSH key to the instance.\n For more information, see [Metadata](/docs/compute/concepts/vm-metadata).",
				Resolver:        schema.PathResolver("Metadata"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "boot_disk_mode",
				Type:            schema.TypeString,
				Description:     "Access mode to the Disk resource.",
				Resolver:        client.EnumPathResolver("BootDisk.Mode"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "boot_disk_device_name",
				Type:            schema.TypeString,
				Description:     "Serial number that is reflected into the /dev/disk/by-id/ tree\n of a Linux operating system running within the instance.\n\n This value can be used to reference the device for mounting, resizing, and so on, from within the instance.",
				Resolver:        schema.PathResolver("BootDisk.DeviceName"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "boot_disk_auto_delete",
				Type:            schema.TypeBool,
				Description:     "Specifies whether the disk will be auto-deleted when the instance is deleted.",
				Resolver:        schema.PathResolver("BootDisk.AutoDelete"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "boot_disk_disk_id",
				Type:            schema.TypeString,
				Description:     "ID of the disk that is attached to the instance.",
				Resolver:        schema.PathResolver("BootDisk.DiskId"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "fqdn",
				Type:            schema.TypeString,
				Description:     "A domain name of the instance. FQDN is defined by the server\n in the format `<hostname>.<region_id>.internal` when the instance is created.\n If the hostname were not specified when the instance was created, FQDN would be `<id>.auto.internal`.",
				Resolver:        schema.PathResolver("Fqdn"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "scheduling_policy_preemptible",
				Type:            schema.TypeBool,
				Description:     "True for short-lived compute instances. For more information, see [Preemptible VMs](/docs/compute/concepts/preemptible-vm).",
				Resolver:        schema.PathResolver("SchedulingPolicy.Preemptible"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "service_account_id",
				Type:            schema.TypeString,
				Description:     "ID of the service account to use for [authentication inside the instance](/docs/compute/operations/vm-connect/auth-inside-vm).\n To get the service account ID, use a [yandex.cloud.iam.v1.ServiceAccountService.List] request.",
				Resolver:        schema.PathResolver("ServiceAccountId"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "network_settings_type",
				Type:            schema.TypeString,
				Description:     "Network Type",
				Resolver:        client.EnumPathResolver("NetworkSettings.Type"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
			{
				Name:            "placement_policy_placement_group_id",
				Type:            schema.TypeString,
				Description:     "Placement group ID.",
				Resolver:        schema.PathResolver("PlacementPolicy.PlacementGroupId"),
				CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
			},
		},

		Relations: []*schema.Table{
			{
				Name:        "yandex_compute_instance_secondary_disks",
				Resolver:    fetchComputeInstanceSecondaryDisks,
				Multiplex:   client.EmptyMultiplex,
				IgnoreError: client.IgnoreErrorHandler,
				Columns: []schema.Column{
					{
						Name:            "instance_cq_id",
						Type:            schema.TypeUUID,
						Description:     "cq_id of parent instance",
						Resolver:        schema.ParentIdResolver,
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "instance_id",
						Type:            schema.TypeString,
						Description:     "id of parent instance",
						Resolver:        schema.ParentResourceFieldResolver("id"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "mode",
						Type:            schema.TypeString,
						Description:     "Access mode to the Disk resource.",
						Resolver:        client.EnumPathResolver("Mode"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "device_name",
						Type:            schema.TypeString,
						Description:     "Serial number that is reflected into the /dev/disk/by-id/ tree\n of a Linux operating system running within the instance.\n\n This value can be used to reference the device for mounting, resizing, and so on, from within the instance.",
						Resolver:        schema.PathResolver("DeviceName"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "auto_delete",
						Type:            schema.TypeBool,
						Description:     "Specifies whether the disk will be auto-deleted when the instance is deleted.",
						Resolver:        schema.PathResolver("AutoDelete"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "disk_id",
						Type:            schema.TypeString,
						Description:     "ID of the disk that is attached to the instance.",
						Resolver:        schema.PathResolver("DiskId"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
				},
			},
			{
				Name:        "yandex_compute_instance_network_interfaces",
				Resolver:    fetchComputeInstanceNetworkInterfaces,
				Multiplex:   client.EmptyMultiplex,
				IgnoreError: client.IgnoreErrorHandler,
				Columns: []schema.Column{
					{
						Name:            "instance_cq_id",
						Type:            schema.TypeUUID,
						Description:     "cq_id of parent instance",
						Resolver:        schema.ParentIdResolver,
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "instance_id",
						Type:            schema.TypeString,
						Description:     "id of parent instance",
						Resolver:        schema.ParentResourceFieldResolver("id"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "index",
						Type:            schema.TypeString,
						Description:     "The index of the network interface, generated by the server, 0,1,2... etc.\n Currently only one network interface is supported per instance.",
						Resolver:        schema.PathResolver("Index"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "mac_address",
						Type:            schema.TypeString,
						Description:     "MAC address that is assigned to the network interface.",
						Resolver:        schema.PathResolver("MacAddress"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "subnet_id",
						Type:            schema.TypeString,
						Description:     "ID of the subnet.",
						Resolver:        schema.PathResolver("SubnetId"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "primary_v_4_address_address",
						Type:            schema.TypeString,
						Description:     "An IPv4 internal network address that is assigned to the instance for this network interface.",
						Resolver:        schema.PathResolver("PrimaryV4Address.Address"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "primary_v_4_address_one_to_one_nat_address",
						Type:            schema.TypeString,
						Description:     "An external IP address associated with this instance.",
						Resolver:        schema.PathResolver("PrimaryV4Address.OneToOneNat.Address"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "primary_v_4_address_one_to_one_nat_ip_version",
						Type:            schema.TypeString,
						Description:     "IP version for the external IP address.",
						Resolver:        client.EnumPathResolver("PrimaryV4Address.OneToOneNat.IpVersion"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "primary_v_6_address_address",
						Type:            schema.TypeString,
						Description:     "An IPv4 internal network address that is assigned to the instance for this network interface.",
						Resolver:        schema.PathResolver("PrimaryV6Address.Address"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "primary_v_6_address_one_to_one_nat_address",
						Type:            schema.TypeString,
						Description:     "An external IP address associated with this instance.",
						Resolver:        schema.PathResolver("PrimaryV6Address.OneToOneNat.Address"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "primary_v_6_address_one_to_one_nat_ip_version",
						Type:            schema.TypeString,
						Description:     "IP version for the external IP address.",
						Resolver:        client.EnumPathResolver("PrimaryV6Address.OneToOneNat.IpVersion"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "security_group_ids",
						Type:            schema.TypeStringArray,
						Description:     "ID's of security groups attached to the interface",
						Resolver:        schema.PathResolver("SecurityGroupIds"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
				},

				Relations: []*schema.Table{
					{
						Name:        "yandex_compute_instance_net_interface_ipv4_1_1_nat_dns_records",
						Resolver:    fetchComputeInstanceNetworkInterfacePrimaryV4AddressOneToOneNatDnsRecords,
						Multiplex:   client.EmptyMultiplex,
						IgnoreError: client.IgnoreErrorHandler,
						Columns: []schema.Column{
							{
								Name:            "network_interfaces_cq_id",
								Type:            schema.TypeUUID,
								Description:     "cq_id of parent network_interfaces",
								Resolver:        schema.ParentIdResolver,
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "fqdn",
								Type:            schema.TypeString,
								Description:     "Name of the A/AAAA record as specified when creating the instance.\n Note that if `fqdn' has no trailing '.', it is specified relative to the zone (@see dns_zone_id).",
								Resolver:        schema.PathResolver("Fqdn"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "dns_zone_id",
								Type:            schema.TypeString,
								Description:     "DNS zone id for the record (optional, if not set, some private zone is used).",
								Resolver:        schema.PathResolver("DnsZoneId"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ttl",
								Type:            schema.TypeBigInt,
								Description:     "DNS record ttl (optional, if not set, a reasonable default is used.)",
								Resolver:        schema.PathResolver("Ttl"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ptr",
								Type:            schema.TypeBool,
								Description:     "When true, indicates there is a corresponding auto-created PTR DNS record.",
								Resolver:        schema.PathResolver("Ptr"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
						},
					},
					{
						Name:        "yandex_compute_instance_net_interface_ipv4_dns_records",
						Resolver:    fetchComputeInstanceNetworkInterfacePrimaryV4AddressDnsRecords,
						Multiplex:   client.EmptyMultiplex,
						IgnoreError: client.IgnoreErrorHandler,
						Columns: []schema.Column{
							{
								Name:            "network_interfaces_cq_id",
								Type:            schema.TypeUUID,
								Description:     "cq_id of parent network_interfaces",
								Resolver:        schema.ParentIdResolver,
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "fqdn",
								Type:            schema.TypeString,
								Description:     "Name of the A/AAAA record as specified when creating the instance.\n Note that if `fqdn' has no trailing '.', it is specified relative to the zone (@see dns_zone_id).",
								Resolver:        schema.PathResolver("Fqdn"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "dns_zone_id",
								Type:            schema.TypeString,
								Description:     "DNS zone id for the record (optional, if not set, some private zone is used).",
								Resolver:        schema.PathResolver("DnsZoneId"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ttl",
								Type:            schema.TypeBigInt,
								Description:     "DNS record ttl (optional, if not set, a reasonable default is used.)",
								Resolver:        schema.PathResolver("Ttl"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ptr",
								Type:            schema.TypeBool,
								Description:     "When true, indicates there is a corresponding auto-created PTR DNS record.",
								Resolver:        schema.PathResolver("Ptr"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
						},
					},
					{
						Name:        "yandex_compute_instance_net_interface_ipv6_1_1_nat_dns_records",
						Resolver:    fetchComputeInstanceNetworkInterfacePrimaryV6AddressOneToOneNatDnsRecords,
						Multiplex:   client.EmptyMultiplex,
						IgnoreError: client.IgnoreErrorHandler,
						Columns: []schema.Column{
							{
								Name:            "network_interfaces_cq_id",
								Type:            schema.TypeUUID,
								Description:     "cq_id of parent network_interfaces",
								Resolver:        schema.ParentIdResolver,
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "fqdn",
								Type:            schema.TypeString,
								Description:     "Name of the A/AAAA record as specified when creating the instance.\n Note that if `fqdn' has no trailing '.', it is specified relative to the zone (@see dns_zone_id).",
								Resolver:        schema.PathResolver("Fqdn"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "dns_zone_id",
								Type:            schema.TypeString,
								Description:     "DNS zone id for the record (optional, if not set, some private zone is used).",
								Resolver:        schema.PathResolver("DnsZoneId"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ttl",
								Type:            schema.TypeBigInt,
								Description:     "DNS record ttl (optional, if not set, a reasonable default is used.)",
								Resolver:        schema.PathResolver("Ttl"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ptr",
								Type:            schema.TypeBool,
								Description:     "When true, indicates there is a corresponding auto-created PTR DNS record.",
								Resolver:        schema.PathResolver("Ptr"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
						},
					},
					{
						Name:        "yandex_compute_instance_net_interface_ipv6_dns_records",
						Resolver:    fetchComputeInstanceNetworkInterfacePrimaryV6AddressDnsRecords,
						Multiplex:   client.EmptyMultiplex,
						IgnoreError: client.IgnoreErrorHandler,
						Columns: []schema.Column{
							{
								Name:            "network_interfaces_cq_id",
								Type:            schema.TypeUUID,
								Description:     "cq_id of parent network_interfaces",
								Resolver:        schema.ParentIdResolver,
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "fqdn",
								Type:            schema.TypeString,
								Description:     "Name of the A/AAAA record as specified when creating the instance.\n Note that if `fqdn' has no trailing '.', it is specified relative to the zone (@see dns_zone_id).",
								Resolver:        schema.PathResolver("Fqdn"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "dns_zone_id",
								Type:            schema.TypeString,
								Description:     "DNS zone id for the record (optional, if not set, some private zone is used).",
								Resolver:        schema.PathResolver("DnsZoneId"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ttl",
								Type:            schema.TypeBigInt,
								Description:     "DNS record ttl (optional, if not set, a reasonable default is used.)",
								Resolver:        schema.PathResolver("Ttl"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
							{
								Name:            "ptr",
								Type:            schema.TypeBool,
								Description:     "When true, indicates there is a corresponding auto-created PTR DNS record.",
								Resolver:        schema.PathResolver("Ptr"),
								CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
							},
						},
					},
				},
			},
			{
				Name:        "yandex_compute_instance_placement_policy_host_affinity_rules",
				Resolver:    fetchComputeInstancePlacementPolicyHostAffinityRules,
				Multiplex:   client.EmptyMultiplex,
				IgnoreError: client.IgnoreErrorHandler,
				Columns: []schema.Column{
					{
						Name:            "instance_cq_id",
						Type:            schema.TypeUUID,
						Description:     "cq_id of parent instance",
						Resolver:        schema.ParentIdResolver,
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "instance_id",
						Type:            schema.TypeString,
						Description:     "id of parent instance",
						Resolver:        schema.ParentResourceFieldResolver("id"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "key",
						Type:            schema.TypeString,
						Description:     "Affinity label or one of reserved values - 'yc.hostId', 'yc.hostGroupId'",
						Resolver:        schema.PathResolver("Key"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "op",
						Type:            schema.TypeString,
						Description:     "Include or exclude action",
						Resolver:        client.EnumPathResolver("Op"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
					{
						Name:            "values",
						Type:            schema.TypeStringArray,
						Description:     "Affinity value or host ID or host group ID",
						Resolver:        schema.PathResolver("Values"),
						CreationOptions: schema.ColumnCreationOptions{Nullable: false, Unique: false},
					},
				},
			},
		},
	}

}

func fetchComputeInstances(ctx context.Context, meta schema.ClientMeta, _ *schema.Resource, res chan interface{}) error {
	c := meta.(*client.Client)

	locations := []string{c.MultiplexedResourceId}

	for _, f := range locations {
		req := &compute.ListInstancesRequest{FolderId: f}
		it := c.Services.Compute.Instance().InstanceIterator(ctx, req)
		for it.Next() {
			res <- it.Value()
		}
	}

	return nil
}

func fetchComputeInstanceSecondaryDisks(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "SecondaryDisks")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}

func fetchComputeInstanceNetworkInterfacePrimaryV4AddressOneToOneNatDnsRecords(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "PrimaryV4Address.OneToOneNat.DnsRecords")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}

func fetchComputeInstanceNetworkInterfacePrimaryV4AddressDnsRecords(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "PrimaryV4Address.DnsRecords")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}

func fetchComputeInstanceNetworkInterfacePrimaryV6AddressOneToOneNatDnsRecords(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "PrimaryV6Address.OneToOneNat.DnsRecords")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}

func fetchComputeInstanceNetworkInterfacePrimaryV6AddressDnsRecords(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "PrimaryV6Address.DnsRecords")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}

func fetchComputeInstanceNetworkInterfaces(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "NetworkInterfaces")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}

func fetchComputeInstancePlacementPolicyHostAffinityRules(_ context.Context, _ schema.ClientMeta, parent *schema.Resource, res chan interface{}) error {
	values := funk.Get(parent.Item, "PlacementPolicy.HostAffinityRules")

	if funk.IsIteratee(values) {
		funk.ForEach(values, func(value interface{}) {
			res <- value
		})
	}

	return nil
}
